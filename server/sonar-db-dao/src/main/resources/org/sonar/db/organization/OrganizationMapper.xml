<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.organization.OrganizationMapper">
  <sql id="selectColumns">
    org.uuid as "uuid",
    org.kee as "key",
    org.name as "name",
    org.description as "description",
    org.default_quality_gate_uuid as "defaultQualityGateUuid",
    org.url as "url",
    org.avatar_url as "avatarUrl",
    org.guarded as "guarded",
    org.subscription as "subscription",
    org.created_at as "createdAt",
    org.updated_at as "updatedAt"
  </sql>

  <sql id="defaultTemplatesColumns">
    org.default_perm_template_project as "projectUuid",
    org.default_perm_template_app as "applicationsUuid",
    org.default_perm_template_port as "portfoliosUuid"
  </sql>

  <select id="selectByUuid" resultType="Organization">
    select
      <include refid="selectColumns"/>
    from organizations org
    where
      org.uuid = #{uuid, jdbcType=VARCHAR}
  </select>

  <select id="selectDefaultTemplatesByUuid" resultType="org.sonar.db.organization.DefaultTemplates">
    select
      <include refid="defaultTemplatesColumns"/>
    from organizations org
    where
      org.uuid = #{uuid, jdbcType=VARCHAR}
      and org.default_perm_template_project is not null
  </select>

  <select id="selectByKey" resultType="Organization">
    select
      <include refid="selectColumns"/>
    from organizations org
    where
      org.kee = #{key, jdbcType=VARCHAR}
  </select>

  <select id="selectByUuids" resultType="Organization">
    select
      <include refid="selectColumns"/>
    from organizations org
    where
      org.uuid in
        <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
          #{uuid, jdbcType=VARCHAR}
        </foreach>
  </select>

  <select id="countByQuery" resultType="int">
    select count(org.uuid)
    <include refid="sqlSelectByQuery" />
  </select>

  <select id="selectByQuery" parameterType="map" resultType="Organization">
    select
      <include refid="selectColumns"/>
    <include refid="sqlSelectByQuery" />
    order by
      org.created_at desc
    limit #{pagination.pageSize,jdbcType=INTEGER} offset #{pagination.offset,jdbcType=INTEGER}
  </select>

  <select id="selectByQuery" parameterType="map" resultType="Organization" databaseId="mssql">
    select * from (
      select row_number() over(order by org.created_at desc) as number,
        <include refid="selectColumns"/>
      <include refid="sqlSelectByQuery" />
    ) as query
    where
      query.number between #{pagination.startRowNumber,jdbcType=INTEGER} and #{pagination.endRowNumber,jdbcType=INTEGER}
    order by
      query.createdAt desc
  </select>

  <select id="selectByQuery" parameterType="map" resultType="Organization" databaseId="oracle">
    select * from (
      select rownum as rn, t.* from (
        select
          <include refid="selectColumns"/>
        <include refid="sqlSelectByQuery" />
        ORDER BY org.created_at desc
      ) t
    ) t
    where
      t.rn between #{pagination.startRowNumber,jdbcType=INTEGER} and #{pagination.endRowNumber,jdbcType=INTEGER}
  </select>

  <sql id="sqlSelectByQuery">
    from organizations org
    <if test="query.member != null">
      inner join organization_members om on org.uuid=om.organization_uuid
        and om.user_id=#{query.member,jdbcType=INTEGER}
    </if>
    <where>
      <if test="query.keys != null">
        org.kee in
          <foreach collection="query.keys" open="(" close=")" item="key" separator=",">
            #{key, jdbcType=VARCHAR}
          </foreach>
      </if>
      <if test="query.onlyTeam">
        and not exists(
          select 1
          from users u
          where u.organization_uuid = org.uuid
          and u.active = ${_true}
        )
      </if>
      <if test="query.onlyPersonal">
        and exists(
          select 1
          from users u
          where u.organization_uuid = org.uuid
          and u.active = ${_true}
        )
      </if>
      <if test="query.withAnalyses">
        and exists(
          select 1
          from snapshots s
          inner join projects p on p.uuid = s.component_uuid
          where p.organization_uuid = org.uuid
          and p.enabled = ${_true}
          and s.islast = ${_true}
        )
      </if>
      <if test="query.analyzedAfter != null">
        and exists(
        select 1
          from snapshots s
          inner join projects p on p.uuid = s.component_uuid
          where p.organization_uuid = org.uuid
          and p.enabled = ${_true}
          and s.islast = ${_true}
          and s.created_at &gt;= #{query.analyzedAfter,jdbcType=BIGINT}
        )
      </if>
    </where>
  </sql>

  <select id="countTeamsByMembers" resultType="org.sonar.db.KeyLongValue">
    select kee as "key", sum(val) as "value"
    from (
      select '0' as kee, 0 as val ${_from_dual}
      union
      select '1' as kee, 0 as val ${_from_dual}
      union
      select '2-4' as kee, 0 as val ${_from_dual}
      union
      select '5-9' as kee, 0 as val ${_from_dual}
      union
      select '10-24' as kee, 0 as val ${_from_dual}
      union
      select '+25' as kee, 0 as val ${_from_dual}
      union
      select kee, count(1) as val
      from (
        select case
            when nb = 0 then '0'
            when nb = 1 then '1'
            when nb &gt;= 2 and nb &lt;= 4 then '2-4'
            when nb &gt;= 5 and nb &lt;= 9 then '5-9'
            when nb &gt;= 10 and nb &lt;= 24 then '10-24'
            else '+25'
          end as kee
        from (
          select o.uuid, count(om.user_id) as nb
          from organizations o
          left join organization_members om on om.organization_uuid = o.uuid
          where not exists(
            select 1
            from users u
            where u.organization_uuid = o.uuid
            and u.active = ${_true}
          )
          group by o.uuid
        ) alias1
      ) alias2
      group by kee
    ) alias3
    group by kee
  </select>

  <select id="countTeamsByProjects" resultType="org.sonar.db.KeyLongValue">
    select kee as "key", sum(val) as "value"
    from (
      select '0' as kee, 0 as val ${_from_dual}
      union
      select '1' as kee, 0 as val ${_from_dual}
      union
      select '2-4' as kee, 0 as val ${_from_dual}
      union
      select '5-9' as kee, 0 as val ${_from_dual}
      union
      select '10-24' as kee, 0 as val ${_from_dual}
      union
      select '+25' as kee, 0 as val ${_from_dual}
      union
      select kee, count(1) as val
      from (
        select case
            when nb = 0 then '0'
            when nb = 1 then '1'
            when nb &gt;= 2 and nb &lt;= 4 then '2-4'
            when nb &gt;= 5 and nb &lt;= 9 then '5-9'
            when nb &gt;= 10 and nb &lt;= 24 then '10-24'
            else '+25'
          end as kee
        from (
          select o.uuid, count(p.uuid) as nb
          from organizations o
          left join projects p on p.organization_uuid = o.uuid
          where not exists(
            select 1
            from users u
            where u.organization_uuid = o.uuid
            and u.active = ${_true}
          )
          group by o.uuid
        ) alias1
      ) alias2
      group by kee
    ) alias3
    group by kee
  </select>

  <select id="countTeamsByNclocRanges" resultType="org.sonar.db.KeyLongValue">
    select kee as "key", sum(val) as "value"
    from (
      select '100K' as kee, 0 as val ${_from_dual}
      union
      select '500K' as kee, 0 as val ${_from_dual}
      union
      select '1M' as kee, 0 as val ${_from_dual}
      union
      select '2M' as kee, 0 as val ${_from_dual}
      union
      select '5M' as kee, 0 as val ${_from_dual}
      union
      select '10M' as kee, 0 as val ${_from_dual}
      union
      select '20M' as kee, 0 as val ${_from_dual}
      union
      select '50M' as kee, 0 as val ${_from_dual}
      union
      select '+50M' as kee, 0 as val ${_from_dual}
      union
      select kee, count(1) as val
      from (
        select case
          when locs &lt;= 100000 then '100K'
          when locs &gt; 100000 and locs &lt;= 500000 then '500K'
          when locs &gt; 500000 and locs &lt;= 1000000 then '1M'
          when locs &gt; 1000000 and locs &lt;= 2000000 then '2M'
          when locs &gt; 2000000 and locs &lt;= 5000000 then '5M'
          when locs &gt; 5000000 and locs &lt;= 10000000 then '10M'
          when locs &gt; 10000000 and locs &lt;= 20000000 then '20M'
          when locs &gt; 20000000 and locs &lt;= 50000000 then '50M'
          else '+50M'
          end as kee
        from (
          select p.organization_uuid as orgUuid, max(lm.value) as locs
          from live_measures lm
          inner join metrics m on m.id = lm.metric_id
          inner join projects p on p.uuid = lm.component_uuid
          inner join project_branches b on b.uuid = p.uuid
          where
            m.name = 'ncloc'
            and p.enabled = ${_true}
            and p.scope = 'PRJ'
            and p.qualifier = 'TRK'
            and p.copy_component_uuid is null
            and b.branch_type = 'LONG'
            and b.key_type = 'BRANCH'
            -- team orgs
            and not exists(
              select 1
              from users u
              where u.organization_uuid = p.organization_uuid
              and u.active = ${_true}
            )
          group by p.organization_uuid
        ) alias1
      ) alias2
      group by kee
    ) alias3
    group by kee

  </select>

  <select id="selectByPermission" parameterType="map" resultType="Organization">
    select
      <include refid="selectColumns"/>
    from organizations org
    inner join user_roles u on
      u.organization_uuid = org.uuid
      and u.user_id = #{userId,jdbcType=INTEGER}
      and u.resource_id is null
      and u.role = #{permission,jdbcType=VARCHAR}
    union
    select
      <include refid="selectColumns"/>
    from organizations org
    inner join group_roles g on
      g.organization_uuid = org.uuid
      and g.resource_id is null
      and g.role = #{permission,jdbcType=VARCHAR}
    inner join groups_users gu on
      gu.group_id = g.group_id
      and gu.user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectAllUuids" resultType="String">
    select uuid from organizations
  </select>

  <select id="selectDefaultGroupIdByUuid" resultType="Integer">
    select org.default_group_id
    from organizations org
    where
    org.uuid = #{uuid, jdbcType=VARCHAR}
  </select>

  <select id="selectNewProjectPrivateByUuid" resultType="Boolean">
    select org.new_project_private
    from organizations org
    where
    org.uuid = #{uuid, jdbcType=VARCHAR}
  </select>

  <select id="selectOrganizationsWithNcloc" resultType="org.sonar.db.organization.OrganizationWithNclocDto">
    select o.uuid as id, o.kee as kee, o.name as name, t.ncloc as ncloc
    from organizations o
    left outer join (
    select orgUuid, sum(sumncloc.maxncloc) as ncloc from (
    select b.project_uuid, p.organization_uuid as orgUuid, max(lm.value) as maxncloc
    from live_measures lm
    inner join metrics m on m.id = lm.metric_id
    inner join projects p on p.uuid = lm.component_uuid
    inner join project_branches b on b.uuid = p.uuid
    where
    m.name = #{ncloc, jdbcType=VARCHAR}
    and p.enabled = ${_true}
    and p.private = ${_true}
    and p.scope = 'PRJ'
    and p.qualifier = 'TRK'
    and p.copy_component_uuid is null
    and p.organization_uuid in <foreach collection="organizationUuids" open="(" close=")" item="uuid" separator=",">#{uuid, jdbcType=VARCHAR}</foreach>
    and b.branch_type = #{branchType, jdbcType=VARCHAR}
    and b.key_type = #{branch, jdbcType=VARCHAR}
    group by b.project_uuid, p.organization_uuid
    ) sumncloc
    group by orgUuid
    ) t on t.orgUuid = o.uuid
    where
    o.uuid in <foreach collection="organizationUuids" open="(" close=")" item="uuid" separator=",">#{uuid, jdbcType=VARCHAR}</foreach>
  </select>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    insert into organizations
    (
      uuid,
      kee,
      name,
      description,
      url,
      avatar_url,
      guarded,
      new_project_private,
      default_quality_gate_uuid,
      subscription,
      created_at,
      updated_at
    )
    values
    (
      #{organization.uuid, jdbcType=VARCHAR},
      #{organization.key, jdbcType=VARCHAR},
      #{organization.name, jdbcType=VARCHAR},
      #{organization.description, jdbcType=VARCHAR},
      #{organization.url, jdbcType=VARCHAR},
      #{organization.avatarUrl, jdbcType=VARCHAR},
      #{organization.guarded, jdbcType=BOOLEAN},
      #{newProjectPrivate, jdbcType=BOOLEAN},
      #{organization.defaultQualityGateUuid, jdbcType=VARCHAR},
      #{organization.subscription, jdbcType=VARCHAR},
      #{organization.createdAt, jdbcType=BIGINT},
      #{organization.updatedAt, jdbcType=BIGINT}
    )
  </insert>

  <update id="update" parameterType="Organization">
    update organizations
    set
      kee = #{organization.key, jdbcType=VARCHAR},
      name = #{organization.name, jdbcType=VARCHAR},
      description = #{organization.description, jdbcType=VARCHAR},
      url = #{organization.url, jdbcType=VARCHAR},
      default_quality_gate_uuid = #{organization.defaultQualityGateUuid, jdbcType=VARCHAR},
      subscription = #{organization.subscription, jdbcType=VARCHAR},
      avatar_url = #{organization.avatarUrl, jdbcType=VARCHAR},
      updated_at = #{organization.updatedAt, jdbcType=BIGINT}
    where
      uuid = #{organization.uuid, jdbcType=VARCHAR}
  </update>
  
  <update id="updateDefaultTemplates">
    update organizations
    set
      default_perm_template_project = #{defaultTemplates.projectUuid, jdbcType=VARCHAR},
      default_perm_template_app = #{defaultTemplates.applicationsUuid, jdbcType=VARCHAR},
      default_perm_template_port = #{defaultTemplates.portfoliosUuid, jdbcType=VARCHAR},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{organizationUuid, jdbcType=VARCHAR}
  </update>

  <update id="updateDefaultGroupId">
    update organizations
    set
      default_group_id = #{defaultGroupId, jdbcType=INTEGER},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{organizationUuid, jdbcType=VARCHAR}
  </update>

  <update id="updateDefaultQualityGate">
    update organizations
    set
      default_quality_gate_uuid = #{defaultQualityGateUuid, jdbcType=INTEGER},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{organizationUuid, jdbcType=VARCHAR}
  </update>

  <update id="updateNewProjectPrivate">
    update organizations
    set
      new_project_private = #{newProjectPrivate, jdbcType=INTEGER},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{organizationUuid, jdbcType=VARCHAR}
  </update>

  <delete id="deleteByUuid">
    delete from organizations
    where
      uuid = #{uuid, jdbcType=VARCHAR}
  </delete>
</mapper>
